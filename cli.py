#!/usr/bin/env python3
import yaml
import click
import keyring
from sys import exit
from copy import copy
from tqdm import tqdm
from pyopnsense import firewall_alias

service_name = "opnsense_alias_updater"


class Firewall(object):
    def __init__(self, config):
        key = config["key"]
        private = keyring.get_password(service_name, key)
        self.client = firewall_alias.FirewallAliasClient(
            key, private, config["base_url"], verify_cert=True
        )

    def get_uuid(self, name):
        for row in self.client.search_item(name)["rows"]:
            if row["name"] == name:
                return row["uuid"]
        return None

    def save(self, alias_data):
        data = copy(alias_data)
        data["description"] = "[{}] {}".format(
            service_name,
            data.get("description", "")
        )

        uuid = self.get_uuid(data["name"])

        if uuid is not None:
            data["id"] = uuid
            self.client.set_item(**data)
        else:
            self.client.add_item(**data)

    def get_items_generated_by_updater(self):
        last_page = False
        rowCount = 100
        current = 1
        items = list()

        pattern = "[%s]" % service_name
        pattern_lenght = len(pattern)

        while not last_page:
            rows = self.client.search_item(
                current=current, rowCount=rowCount
            )['rows']

            if len(rows) == rowCount:
                current = current + 1
            else:
                last_page = True

            for row in rows:
                if row["description"][:pattern_lenght] == pattern:
                    items.append(row)
        return items

    def delete(self, uuid):
        self.client.delete_item(uuid)

    def apply(self):
        self.client.reconfigure()


@click.group()
def cli():
    global data
    with open("networks.yml", 'r') as stream:
        try:
            data = yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            print(exc)
            exit(-1)


@cli.command(help='Push autogenerated aliases on firewall and apply them.')
def push():
    for fw_config in data["firewalls"]:
        fw = Firewall(fw_config)
        click.echo('Pushing autogenerated aliases on %s' % fw_config["name"])
        for alias in tqdm(data["networks"]):
            fw.save(alias)
        fw.apply()
        click.echo('Aliases applyied on %s' % fw_config["name"])


@cli.command(help='Remove unreferenced autogenerated aliases.')
def clean():
    alias_names = map(lambda x: x["name"], data["networks"])
    for fw_config in data["firewalls"]:
        fw = Firewall(fw_config)
        click.echo('Cleaning autogenerated aliases on %s' % fw_config["name"])

        click.echo('Filtering ...')
        delete_list = list()
        for row in tqdm(fw.get_items_generated_by_updater()):
            if row["name"] not in alias_names:
                delete_list.append(row['uuid'])

        click.echo('Deleting ...')
        for uuid in tqdm(delete_list):
            fw.delete(uuid)


if __name__ == "__main__":
    cli()
