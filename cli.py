#!/usr/bin/env python3
import click
import ipaddress
from tqdm import tqdm
from firewall import FirewallAlias, FirewallShaper
from network_file import NetworkFile


@click.group()
def cli():
    global network_file
    network_file = NetworkFile()


@cli.command(help='Push autogenerated aliases on firewall and apply them.')
def push():
    for fw_config in network_file.data["firewalls"]:
        fw = FirewallAlias(fw_config)
        click.echo('Pushing autogenerated aliases on %s' % fw_config["name"])
        for alias in tqdm(network_file.data["networks"]):
            fw.save(network_file.clean_alias(alias))
        fw.apply()
        click.echo('Aliases applied on %s' % fw_config["name"])

    for shaper in network_file.data["shaper"]:
        firewall_configs = list(
            filter(lambda fw: fw['name'] == shaper["target"], network_file.data["firewalls"])
        )
        if len(firewall_configs) != 1:
            raise ValueError("Unknown firewall: %s" % shaper["target"])

        fw_config = firewall_configs[0]

        fw = FirewallShaper(fw_config)
        fw_alias = FirewallAlias(fw_config)
        click.echo('Pushing Traffic Shaper rules on %s' % fw_config["name"])
        for rule in tqdm(shaper["rules"]):
            for endpoint in ["source", "destination"]:
                new_content = list()
                for content in rule[endpoint]['content']:
                    try:
                        ipaddress.ip_address(content)
                        new_content.append(content)
                        continue
                    except ValueError:
                        pass
                    try:
                        ipaddress.ip_network(content)
                        new_content.append(content)
                        continue
                    except ValueError:
                        pass
                    new_content.extend(fw_alias.client.get_tables_by_name(content))

                rule[endpoint]['content'] = new_content
            fw.save(rule)
        fw.apply()
        click.echo('Traffic Shaper rules applied on %s' % fw_config["name"])


@cli.command(help='Remove unreferenced autogenerated aliases.')
def clean():
    alias_names = map(lambda x: x["name"], network_file.data["networks"])
    for fw_config in network_file.data["firewalls"]:
        fw = FirewallAlias(fw_config)
        click.echo('Cleaning autogenerated aliases on %s' % fw_config["name"])

        click.echo('Filtering ...')
        delete_list = list()
        for row in tqdm(fw.get_items_generated_by_updater()):
            if row["name"] not in alias_names:
                delete_list.append(row['uuid'])

        click.echo('Deleting ...')
        for uuid in tqdm(delete_list):
            fw.delete(uuid)


@cli.command(help='Sort network file.')
def sort():
    network_file.sort()
    network_file.save()


@cli.command(help='Update network file with URL table.')
def update():
    network_file.update()
    network_file.save()


if __name__ == "__main__":
    cli()
